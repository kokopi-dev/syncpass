#!/bin/bash
# env:
## IP_ADDRESS,PORT,USERNAME,PRIVATE_KEY

SSH_COMMAND="ssh $USERNAME@$IP_ADDRESS -i $PRIVATE_KEY -p $PORT"
SYNCPASS_VERSION_PATH="~/.syncpass_version"
PASSWORD_STORE_ZIP_FILENAME_LOCAL=".syncpass_passwordstore_compressed_local.tar.gz"
PASSWORD_STORE_ZIP_FILENAME_SERVER=".syncpass_passwordstore_compressed_server.tar.gz"

private_func_get_scp_command() {
    local path=$1
    local to_send_path=$2
    if [[ -n $to_send_path ]]; then
        echo "scp -P $PORT -i $PRIVATE_KEY $to_send_path $USERNAME@$IP_ADDRESS:$path"
    else
        echo "scp -i $PRIVATE_KEY -P $PORT $USERNAME@$IP_ADDRESS:$path"
    fi
}
func_server_setup_syncpass_version() {
    local result=$($SSH_COMMAND "
        if [ -f ${SYNCPASS_VERSION_PATH} ]; then
            echo 'Syncpass version already exists on the server.'
        else
            echo 'VERSION=1' > $SYNCPASS_VERSION_PATH
            echo '>>> Added syncpass version file to server'
        fi
    ")
    echo $result
}

# impo
func_get_server_version() {
    if $SSH_COMMAND "cat $SYNCPASS_VERSION_PATH" | grep "VERSION=" | cut -d'=' -f2; then
        echo $version
    else
        echo -e "✗ ERROR - func_get_server_version: SSH command failed."
        exit 1
    fi
}

# impo
func_update_server_version() {
    if [[ -n "$1" ]]; then
        if $SSH_COMMAND "echo \"VERSION=$1\" > $SYNCPASS_VERSION_PATH"; then
            echo "✓ SSH successful"
        else
            echo -e "✗ ERROR - func_update_server_version: SSH command failed."
            exit 1
        fi
    else
        echo -e "✗ ERROR - func_update_server_version: Version arguement required."
        exit 1
    fi
}

# impo
func_update_server_passwordstore() {
    # requirement: C_PATH
    # TODO verify env settings
    if [ -d ~/.password-store ]; then
        echo -e ">>> Found .password-store, preparing to send to server."
    else
        echo -e "> Could not find .password-store, try creating passwords locally first"
        exit 1
    fi

    # compress local .password-store
    echo -e ">>> Compressing local .password-store ..."
    local compressed_zip_path="${C_PATH}/$PASSWORD_STORE_ZIP_FILENAME_LOCAL"
    if cd $HOME && tar -czf $compressed_zip_path .password-store; then
        echo -e "✓ Compressed local .password-store to $compressed_zip_path\n"
    else
        echo -e "✗ ERROR - func_update_server_passwordstore: Compressing local .password-store failed."
        exit 1
    fi

    # send compressed local to server
    if $(private_func_get_scp_command "~/${PASSWORD_STORE_ZIP_FILENAME_SERVER}" $compressed_zip_path); then
        echo -e "\n✓ Sent local .password-store to the server"
    else
        echo -e "✗ ERROR - func_update_server_passwordstore: SCP command failed."
        exit 1
    fi

    stty sane

    # # decompress sent local on the server
    # if $SSH_COMMAND "mkdir -p ~/.password-store && tar -xzf ~/$PASSWORD_STORE_ZIP_FILENAME_SERVER -C ~/"; then
    #     echo -e "✓ Successfully synced local .password-store to the server"
    # else
    #     echo -e "✗ ERROR - func_update_server_passwordstore: SCP command failed."
    #     exit 1
    # fi
}

#impo
func_get_server_passwordstore() {
    # requirement: settings: C_PATH
    # TODO check if settings exist

    if $SSH_COMMAND "[ -f ~/$PASSWORD_STORE_ZIP_FILENAME_SERVER ]"; then
        echo -e "✓ Found .password-store copy on server\n"
        # if $SSH_COMMAND "tar -czf ~/$PASSWORD_STORE_ZIP_FILENAME_SERVER ~/.password-store"; then
        #     echo -e "✓ Compressed .password-store on server\n"
        # else
        #     echo -e "✗ ERROR - func_get_server_passwordstore: SSH command failed."
        #     exit 1
        # fi
    else
        echo "✗ .password-store does not exist on the server, try uploading passwords first"
        exit 1
    fi

    # download server's password store on local
    if $(private_func_get_scp_command "~/${PASSWORD_STORE_ZIP_FILENAME_SERVER}") $C_PATH; then
        echo -e "\n✓ Downloaded .password-store from server -> $PASSWORD_STORE_ZIP_FILENAME_SERVER"
    else
        echo -e "✗ ERROR - func_get_server_passwordstore: SCP command failed."
        exit 1
    fi

    # # unzip downloaded
    if tar -xzf "$C_PATH/$PASSWORD_STORE_ZIP_FILENAME_SERVER"  -C ~/; then
        echo -e "✓ Successfully synced local .password-store from the server"
    else
        echo -e "✗ ERROR - func_get_server_passwordstore: tar command failed."
        exit 1
    fi
}
