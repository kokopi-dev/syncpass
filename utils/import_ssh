#!/bin/bash
# env:
## IP_ADDRESS,PORT,USERNAME,PRIVATE_KEY

SYNCPASS_VERSION_PATH="~/.syncpass_version"
PASSWORD_STORE_ZIP_FILENAME_LOCAL=".syncpass_passwordstore_compressed_local.tar.gz"
PASSWORD_STORE_ZIP_FILENAME_SERVER=".syncpass_passwordstore_compressed_server.tar.gz"
GPG_PUBLIC_KEY_FILENAME="public-key.asc"
GPG_PRIVATE_KEY_FILENAME="private-key.asc"

# split off this file into password-store and gpg key related functions
private_func_get_ssh_command() {
    if [[ -z $PORT ]]; then
        PORT=22
    fi
    echo "ssh $USERNAME@$IP_ADDRESS -i $PRIVATE_KEY -p $PORT"
}

private_func_send_scp_command() {
    local server_path=$1
    local local_source=$2
    if [[ -z $PORT ]]; then
        PORT=22
    fi

    echo "scp -i $PRIVATE_KEY -P $PORT $local_source $USERNAME@$IP_ADDRESS:$server_path"
}

private_func_retrieve_scp_command() {
    local server_path=$1
    local dest=$2
        
    if [[ -z $PORT ]]; then
        PORT=22
    fi

    # specified destination on local
    if [[ -n $dest ]]; then
        echo "scp -i $PRIVATE_KEY -P $PORT $USERNAME@$IP_ADDRESS:$server_path $dest"
    else
        echo "scp -i $PRIVATE_KEY -P $PORT $USERNAME@$IP_ADDRESS:$server_path"
    fi
}

func_server_setup_syncpass_version() {
    SSH_COMMAND=$(private_func_get_ssh_command)
    local result=$($SSH_COMMAND "
        if [ -f ${SYNCPASS_VERSION_PATH} ]; then
            echo 'Syncpass version already exists on the server.'
        else
            echo 'VERSION=1' > $SYNCPASS_VERSION_PATH
            echo '>>> Added syncpass version file to server'
        fi
    ")
    echo $result
}

func_get_server_version() {
    SSH_COMMAND=$(private_func_get_ssh_command)
    if $SSH_COMMAND "cat $SYNCPASS_VERSION_PATH" | grep "VERSION=" | cut -d'=' -f2; then
        echo $version
    else
        print_status "ERROR" "✗ ERROR - func_get_server_version: SSH command failed."
        exit 1
    fi
}

func_update_server_version() {
    if [[ -n "$1" ]]; then
        SSH_COMMAND=$(private_func_get_ssh_command)
        if $SSH_COMMAND "echo \"VERSION=$1\" > $SYNCPASS_VERSION_PATH"; then
            print_status "OK" "✓ SSH successful"
        else
            print_status "ERROR" "✗ func_update_server_version: SSH command failed."
            exit 1
        fi
    else
        print_status "ERROR" "✗ func_update_server_version: Version arguement required."
        exit 1
    fi
}

func_update_server_passwordstore() {
    # requirement: C_PATH
    # TODO verify env settings
    if [ -d ~/.password-store ]; then
        print_status "INFO" ">>> Found .password-store, preparing to send to server."
    else
        print_status "ERROR" "> Could not find .password-store, try creating passwords locally first"
        exit 1
    fi

    # compress local .password-store
    print_status "INFO" ">>> Compressing local .password-store ..."
    local compressed_zip_path="${C_PATH}/$PASSWORD_STORE_ZIP_FILENAME_LOCAL"
    if cd $HOME && tar --warning=no-timestamp -czf $compressed_zip_path .password-store; then
        print_status "OK" "✓ Compressed local .password-store to $compressed_zip_path\n"
    else
        print_status "ERROR" "✗ func_update_server_passwordstore: Compressing local .password-store failed."
        exit 1
    fi

    # send compressed local to server
    if $(private_func_send_scp_command "~/${PASSWORD_STORE_ZIP_FILENAME_SERVER}" $compressed_zip_path); then
        echo -e ""
        print_status "OK" "✓ Sent local .password-store to the server"
    else
        print_status "ERROR" "✗ func_update_server_passwordstore: SCP command failed."
        exit 1
    fi

    stty sane
}

func_get_server_passwordstore() {
    # requirement: settings: C_PATH
    # TODO check if settings exist

    SSH_COMMAND=$(private_func_get_ssh_command)
    if $SSH_COMMAND "[ -f ~/$PASSWORD_STORE_ZIP_FILENAME_SERVER ]"; then
        print_status "OK" "✓ Found compressed password-store on server\n"
    else
        print_status "ERROR" "✗ .password-store does not exist on the server, try uploading passwords first"
        exit 1
    fi

    # download server's password store on local
    if $(private_func_retrieve_scp_command "~/${PASSWORD_STORE_ZIP_FILENAME_SERVER}" "$C_PATH"); then
        echo -e ""
        print_status "OK" "✓ Downloaded .password-store from server -> $PASSWORD_STORE_ZIP_FILENAME_SERVER"
    else
        print_status "ERROR" "✗ func_get_server_passwordstore: SCP command failed."
        exit 1
    fi

    # remove current .password-store state
    if rm -rf ~/.password-store; then
        print_status "INFO" "> Replacing local .password-store with the one from server"
    else
        print_status "ERROR" "✗ func_get_server_passwordstore: removing .password-store failed"
    fi

    # # unzip downloaded
    if tar --warning=no-timestamp -xzf "$C_PATH/$PASSWORD_STORE_ZIP_FILENAME_SERVER"  -C ~/; then
        print_status "OK" "✓ Successfully synced local .password-store from the server"
    else
        print_status "ERROR" "✗ func_get_server_passwordstore: tar command failed."
        exit 1
    fi
}

func_send_gpg_key() {
    local gpg_key_id=$1
    if !(gpg --list-keys $key_id | grep -q "$key_id"); then
        print_status "ERROR" "✗ gpg key id was not found: $gpg_key_id"
        echo -e "> Available secret keys:"
        gpg --list-keys | awk '
/^pub/ { getline; keyid=$1; gsub(/^[[:space:]]+/, "", keyid); getline; gsub(/^uid[[:space:]]*\[[^\]]*\][[:space:]]*/, ""); print keyid " - " $0 }'
        exit 1
    fi

    local private_path="$C_PATH/private-key.asc"
    local public_path="$C_PATH/public-key.asc"
    gpg --export-secret-keys --armor "$gpg_key_id" > "$private_path"
    gpg --export --armor "$gpg_key_id" > "$public_path"

    if $(private_func_send_scp_command "~/" "$C_PATH/*.asc"); then
        print_status "OK" "✓ GPG keys uploaded successfully"
        rm "$C_PATH/private-key.asc"
        rm "$C_PATH/public-key.asc"
    else
        print_status "ERROR" "✗ func_send_gpg_key: scp failed to send gpg keys"
        rm "$C_PATH/private-key.asc"
        rm "$C_PATH/public-key.asc"
        exit 1
    fi
}

func_get_gpg_key() {
    SSH_COMMAND=$(private_func_get_ssh_command)
    if $SSH_COMMAND "[ -f ~/$GPG_PUBLIC_KEY_FILENAME ] && [ -f ~/$GPG_PRIVATE_KEY_FILENAME ]"; then
        if $(private_func_retrieve_scp_command "~/*.asc" "$C_PATH"); then
            print_status "OK" "✓ Retrieved gpg keys from the server"
        else
            print_status "ERROR" "✗ Could not get gpg keys from the server"
            exit 1
        fi
    else
        print_status "ERROR" "✗ Could not find gpg keys on the server"
        exit 1
    fi
}

func_remove_gpg_key() {
    SSH_COMMAND=$(private_func_get_ssh_command)
    if ($SSH_COMMAND "[ -f ~/$GPG_PUBLIC_KEY_FILENAME ] && [ -f ~/$GPG_PRIVATE_KEY_FILENAME ]"); then
        if $SSH_COMMAND "rm ~/$GPG_PUBLIC_KEY_FILENAME ~/$GPG_PRIVATE_KEY_FILENAME"; then
            print_status "OK" "✓ Removed gpg keys from the server"
        else
            print_status "ERROR" "✗ Could not remove gpg keys from the server"
            exit 1
        fi
    else
        print_status "ERROR" "✗ Could not find gpg keys on the server"
        exit 1
    fi
}
