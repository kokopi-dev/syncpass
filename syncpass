#!/bin/bash
imp() {
    local path=$1
    if [ -f $path ]; then
        set -a
        source $path
        set +a
    fi
}
### env vars ###
imp ".env"
imp "version"
imp "settings"

### imports ###

# func_init_local
imp "./utils/import_init"

# func_increment_version, func_print_settings
imp "./utils/import_settings"

# func_get_server_home_path
imp "./utils/import_ssh"


versions_are_unsynced() {
    # 0 = needs update
    local server_ver=$(func_get_server_version)
    if [[ $server_ver -eq $V ]]; then
        return 1
    else
        return 0
    fi
}

case "$1" in
    add|edit)
        # pull server version to see if update is needed
        # push version update to server
        echo -e "found add/edit\n"
        pass $@ 2>&1
        exit_code=$?

        if [ $exit_code -eq 0 ]; then
            echo -e "add/edit success\n"
            func_increment_version
            func_update_server_passwordstore

            curr_ver=$(func_get_local_version)
            func_update_server_version $curr_ver
        else
            echo -e "add/edit failed\n"
        fi
        ;;
    test)
        ;;
    init)
        func_init_local
        server_home_path=$(func_get_server_home_path)
        # check if server has syncpass
        # check if server has a password store linked already
        # pull server's password store, confrim before doing this
        # check if there is password store local already before pulling, back it up if there is.
        # back it up in current directory
        ;;
    *)
        if [[ -n "$1" ]]; then
            folder=$1

            local needs_update=$(versions_are_unsynced)
            if [[ $needs_update -eq 0 ]]; then
                echo -e ">>> Syncpass versions on server and local are unsynced, updating ...\n"
            else
                echo -e ">>> Syncpass Versions on server and local are synced. \n"
            fi
            local password=$(pass show $folder)
            # pull version to update if there is change if result is success
            echo $password
            exit 0
        fi
        func_print_settings
        echo "Show help commands"
        ;;
esac
